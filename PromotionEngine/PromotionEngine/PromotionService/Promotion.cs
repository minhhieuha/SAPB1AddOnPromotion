//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 


/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="PromotionSoap", Namespace="http://tempuri.org/")]
public partial class Promotion : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback UpdateJsonCompanyOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateJsonUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateCompanyOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateCustomerOperationCompleted;
    
    private System.Threading.SendOrPostCallback UpdateItemOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllCompanyOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCompanyByCodeOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserByUserNameOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllCustomerOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetCustomerByCodeOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetAllItemOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetItemByCodeOperationCompleted;
    
    /// <remarks/>
    public Promotion() {
        this.Url = "http://localhost:49310/Promotion.asmx";
    }
    
    /// <remarks/>
    public event UpdateJsonCompanyCompletedEventHandler UpdateJsonCompanyCompleted;
    
    /// <remarks/>
    public event UpdateJsonUserCompletedEventHandler UpdateJsonUserCompleted;
    
    /// <remarks/>
    public event UpdateCompanyCompletedEventHandler UpdateCompanyCompleted;
    
    /// <remarks/>
    public event UpdateUserCompletedEventHandler UpdateUserCompleted;
    
    /// <remarks/>
    public event UpdateCustomerCompletedEventHandler UpdateCustomerCompleted;
    
    /// <remarks/>
    public event UpdateItemCompletedEventHandler UpdateItemCompleted;
    
    /// <remarks/>
    public event GetAllCompanyCompletedEventHandler GetAllCompanyCompleted;
    
    /// <remarks/>
    public event GetCompanyByCodeCompletedEventHandler GetCompanyByCodeCompleted;
    
    /// <remarks/>
    public event GetAllUserCompletedEventHandler GetAllUserCompleted;
    
    /// <remarks/>
    public event GetUserByUserNameCompletedEventHandler GetUserByUserNameCompleted;
    
    /// <remarks/>
    public event GetAllCustomerCompletedEventHandler GetAllCustomerCompleted;
    
    /// <remarks/>
    public event GetCustomerByCodeCompletedEventHandler GetCustomerByCodeCompleted;
    
    /// <remarks/>
    public event GetAllItemCompletedEventHandler GetAllItemCompleted;
    
    /// <remarks/>
    public event GetItemByCodeCompletedEventHandler GetItemByCodeCompleted;
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateJsonCompany", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string UpdateJsonCompany(string userId, string passWord, string companyCode, string companyName, bool isActive, string address, string contactPerson, string contactPhone, string databaseName, bool isInsert) {
        object[] results = this.Invoke("UpdateJsonCompany", new object[] {
                    userId,
                    passWord,
                    companyCode,
                    companyName,
                    isActive,
                    address,
                    contactPerson,
                    contactPhone,
                    databaseName,
                    isInsert});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateJsonCompany(string userId, string passWord, string companyCode, string companyName, bool isActive, string address, string contactPerson, string contactPhone, string databaseName, bool isInsert, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateJsonCompany", new object[] {
                    userId,
                    passWord,
                    companyCode,
                    companyName,
                    isActive,
                    address,
                    contactPerson,
                    contactPhone,
                    databaseName,
                    isInsert}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateJsonCompany(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateJsonCompanyAsync(string userId, string passWord, string companyCode, string companyName, bool isActive, string address, string contactPerson, string contactPhone, string databaseName, bool isInsert) {
        this.UpdateJsonCompanyAsync(userId, passWord, companyCode, companyName, isActive, address, contactPerson, contactPhone, databaseName, isInsert, null);
    }
    
    /// <remarks/>
    public void UpdateJsonCompanyAsync(string userId, string passWord, string companyCode, string companyName, bool isActive, string address, string contactPerson, string contactPhone, string databaseName, bool isInsert, object userState) {
        if ((this.UpdateJsonCompanyOperationCompleted == null)) {
            this.UpdateJsonCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateJsonCompanyOperationCompleted);
        }
        this.InvokeAsync("UpdateJsonCompany", new object[] {
                    userId,
                    passWord,
                    companyCode,
                    companyName,
                    isActive,
                    address,
                    contactPerson,
                    contactPhone,
                    databaseName,
                    isInsert}, this.UpdateJsonCompanyOperationCompleted, userState);
    }
    
    private void OnUpdateJsonCompanyOperationCompleted(object arg) {
        if ((this.UpdateJsonCompanyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateJsonCompanyCompleted(this, new UpdateJsonCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateJsonUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string UpdateJsonUser(string userId, string passWord, string oUserID, string userName, string CompanyCode, string UserPassword, bool IsAdmin, bool IsActive, bool IsTrial, string Email, string Phone, string databaseName, bool isInsert) {
        object[] results = this.Invoke("UpdateJsonUser", new object[] {
                    userId,
                    passWord,
                    oUserID,
                    userName,
                    CompanyCode,
                    UserPassword,
                    IsAdmin,
                    IsActive,
                    IsTrial,
                    Email,
                    Phone,
                    databaseName,
                    isInsert});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateJsonUser(string userId, string passWord, string oUserID, string userName, string CompanyCode, string UserPassword, bool IsAdmin, bool IsActive, bool IsTrial, string Email, string Phone, string databaseName, bool isInsert, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateJsonUser", new object[] {
                    userId,
                    passWord,
                    oUserID,
                    userName,
                    CompanyCode,
                    UserPassword,
                    IsAdmin,
                    IsActive,
                    IsTrial,
                    Email,
                    Phone,
                    databaseName,
                    isInsert}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateJsonUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateJsonUserAsync(string userId, string passWord, string oUserID, string userName, string CompanyCode, string UserPassword, bool IsAdmin, bool IsActive, bool IsTrial, string Email, string Phone, string databaseName, bool isInsert) {
        this.UpdateJsonUserAsync(userId, passWord, oUserID, userName, CompanyCode, UserPassword, IsAdmin, IsActive, IsTrial, Email, Phone, databaseName, isInsert, null);
    }
    
    /// <remarks/>
    public void UpdateJsonUserAsync(string userId, string passWord, string oUserID, string userName, string CompanyCode, string UserPassword, bool IsAdmin, bool IsActive, bool IsTrial, string Email, string Phone, string databaseName, bool isInsert, object userState) {
        if ((this.UpdateJsonUserOperationCompleted == null)) {
            this.UpdateJsonUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateJsonUserOperationCompleted);
        }
        this.InvokeAsync("UpdateJsonUser", new object[] {
                    userId,
                    passWord,
                    oUserID,
                    userName,
                    CompanyCode,
                    UserPassword,
                    IsAdmin,
                    IsActive,
                    IsTrial,
                    Email,
                    Phone,
                    databaseName,
                    isInsert}, this.UpdateJsonUserOperationCompleted, userState);
    }
    
    private void OnUpdateJsonUserOperationCompleted(object arg) {
        if ((this.UpdateJsonUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateJsonUserCompleted(this, new UpdateJsonUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCompany", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string UpdateCompany(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        object[] results = this.Invoke("UpdateCompany", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateCompany(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateCompany", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateCompany(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateCompanyAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        this.UpdateCompanyAsync(userId, passWord, data, databaseName, isInsert, null);
    }
    
    /// <remarks/>
    public void UpdateCompanyAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, object userState) {
        if ((this.UpdateCompanyOperationCompleted == null)) {
            this.UpdateCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCompanyOperationCompleted);
        }
        this.InvokeAsync("UpdateCompany", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, this.UpdateCompanyOperationCompleted, userState);
    }
    
    private void OnUpdateCompanyOperationCompleted(object arg) {
        if ((this.UpdateCompanyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateCompanyCompleted(this, new UpdateCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string UpdateUser(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        object[] results = this.Invoke("UpdateUser", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateUser(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateUser", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateUserAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        this.UpdateUserAsync(userId, passWord, data, databaseName, isInsert, null);
    }
    
    /// <remarks/>
    public void UpdateUserAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, object userState) {
        if ((this.UpdateUserOperationCompleted == null)) {
            this.UpdateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserOperationCompleted);
        }
        this.InvokeAsync("UpdateUser", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, this.UpdateUserOperationCompleted, userState);
    }
    
    private void OnUpdateUserOperationCompleted(object arg) {
        if ((this.UpdateUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateUserCompleted(this, new UpdateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string UpdateCustomer(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        object[] results = this.Invoke("UpdateCustomer", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateCustomer(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateCustomer", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateCustomer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateCustomerAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        this.UpdateCustomerAsync(userId, passWord, data, databaseName, isInsert, null);
    }
    
    /// <remarks/>
    public void UpdateCustomerAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, object userState) {
        if ((this.UpdateCustomerOperationCompleted == null)) {
            this.UpdateCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCustomerOperationCompleted);
        }
        this.InvokeAsync("UpdateCustomer", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, this.UpdateCustomerOperationCompleted, userState);
    }
    
    private void OnUpdateCustomerOperationCompleted(object arg) {
        if ((this.UpdateCustomerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateCustomerCompleted(this, new UpdateCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string UpdateItem(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        object[] results = this.Invoke("UpdateItem", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginUpdateItem(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("UpdateItem", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndUpdateItem(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public void UpdateItemAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert) {
        this.UpdateItemAsync(userId, passWord, data, databaseName, isInsert, null);
    }
    
    /// <remarks/>
    public void UpdateItemAsync(string userId, string passWord, System.Data.DataSet data, string databaseName, bool isInsert, object userState) {
        if ((this.UpdateItemOperationCompleted == null)) {
            this.UpdateItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateItemOperationCompleted);
        }
        this.InvokeAsync("UpdateItem", new object[] {
                    userId,
                    passWord,
                    data,
                    databaseName,
                    isInsert}, this.UpdateItemOperationCompleted, userState);
    }
    
    private void OnUpdateItemOperationCompleted(object arg) {
        if ((this.UpdateItemCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.UpdateItemCompleted(this, new UpdateItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllCompany", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetAllCompany(string dataBaseName) {
        object[] results = this.Invoke("GetAllCompany", new object[] {
                    dataBaseName});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllCompany(string dataBaseName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllCompany", new object[] {
                    dataBaseName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetAllCompany(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllCompanyAsync(string dataBaseName) {
        this.GetAllCompanyAsync(dataBaseName, null);
    }
    
    /// <remarks/>
    public void GetAllCompanyAsync(string dataBaseName, object userState) {
        if ((this.GetAllCompanyOperationCompleted == null)) {
            this.GetAllCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCompanyOperationCompleted);
        }
        this.InvokeAsync("GetAllCompany", new object[] {
                    dataBaseName}, this.GetAllCompanyOperationCompleted, userState);
    }
    
    private void OnGetAllCompanyOperationCompleted(object arg) {
        if ((this.GetAllCompanyCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllCompanyCompleted(this, new GetAllCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCompanyByCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetCompanyByCode(string dataBaseName, string companyCode) {
        object[] results = this.Invoke("GetCompanyByCode", new object[] {
                    dataBaseName,
                    companyCode});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCompanyByCode(string dataBaseName, string companyCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCompanyByCode", new object[] {
                    dataBaseName,
                    companyCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetCompanyByCode(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetCompanyByCodeAsync(string dataBaseName, string companyCode) {
        this.GetCompanyByCodeAsync(dataBaseName, companyCode, null);
    }
    
    /// <remarks/>
    public void GetCompanyByCodeAsync(string dataBaseName, string companyCode, object userState) {
        if ((this.GetCompanyByCodeOperationCompleted == null)) {
            this.GetCompanyByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyByCodeOperationCompleted);
        }
        this.InvokeAsync("GetCompanyByCode", new object[] {
                    dataBaseName,
                    companyCode}, this.GetCompanyByCodeOperationCompleted, userState);
    }
    
    private void OnGetCompanyByCodeOperationCompleted(object arg) {
        if ((this.GetCompanyByCodeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCompanyByCodeCompleted(this, new GetCompanyByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetAllUser(string dataBaseName) {
        object[] results = this.Invoke("GetAllUser", new object[] {
                    dataBaseName});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllUser(string dataBaseName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllUser", new object[] {
                    dataBaseName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetAllUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllUserAsync(string dataBaseName) {
        this.GetAllUserAsync(dataBaseName, null);
    }
    
    /// <remarks/>
    public void GetAllUserAsync(string dataBaseName, object userState) {
        if ((this.GetAllUserOperationCompleted == null)) {
            this.GetAllUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserOperationCompleted);
        }
        this.InvokeAsync("GetAllUser", new object[] {
                    dataBaseName}, this.GetAllUserOperationCompleted, userState);
    }
    
    private void OnGetAllUserOperationCompleted(object arg) {
        if ((this.GetAllUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllUserCompleted(this, new GetAllUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserByUserName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetUserByUserName(string dataBaseName, string userName) {
        object[] results = this.Invoke("GetUserByUserName", new object[] {
                    dataBaseName,
                    userName});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserByUserName(string dataBaseName, string userName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserByUserName", new object[] {
                    dataBaseName,
                    userName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetUserByUserName(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetUserByUserNameAsync(string dataBaseName, string userName) {
        this.GetUserByUserNameAsync(dataBaseName, userName, null);
    }
    
    /// <remarks/>
    public void GetUserByUserNameAsync(string dataBaseName, string userName, object userState) {
        if ((this.GetUserByUserNameOperationCompleted == null)) {
            this.GetUserByUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserByUserNameOperationCompleted);
        }
        this.InvokeAsync("GetUserByUserName", new object[] {
                    dataBaseName,
                    userName}, this.GetUserByUserNameOperationCompleted, userState);
    }
    
    private void OnGetUserByUserNameOperationCompleted(object arg) {
        if ((this.GetUserByUserNameCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserByUserNameCompleted(this, new GetUserByUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetAllCustomer(string dataBaseName) {
        object[] results = this.Invoke("GetAllCustomer", new object[] {
                    dataBaseName});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllCustomer(string dataBaseName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllCustomer", new object[] {
                    dataBaseName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetAllCustomer(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllCustomerAsync(string dataBaseName) {
        this.GetAllCustomerAsync(dataBaseName, null);
    }
    
    /// <remarks/>
    public void GetAllCustomerAsync(string dataBaseName, object userState) {
        if ((this.GetAllCustomerOperationCompleted == null)) {
            this.GetAllCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCustomerOperationCompleted);
        }
        this.InvokeAsync("GetAllCustomer", new object[] {
                    dataBaseName}, this.GetAllCustomerOperationCompleted, userState);
    }
    
    private void OnGetAllCustomerOperationCompleted(object arg) {
        if ((this.GetAllCustomerCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllCustomerCompleted(this, new GetAllCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerByCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetCustomerByCode(string dataBaseName, string customerCode) {
        object[] results = this.Invoke("GetCustomerByCode", new object[] {
                    dataBaseName,
                    customerCode});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetCustomerByCode(string dataBaseName, string customerCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetCustomerByCode", new object[] {
                    dataBaseName,
                    customerCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetCustomerByCode(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetCustomerByCodeAsync(string dataBaseName, string customerCode) {
        this.GetCustomerByCodeAsync(dataBaseName, customerCode, null);
    }
    
    /// <remarks/>
    public void GetCustomerByCodeAsync(string dataBaseName, string customerCode, object userState) {
        if ((this.GetCustomerByCodeOperationCompleted == null)) {
            this.GetCustomerByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerByCodeOperationCompleted);
        }
        this.InvokeAsync("GetCustomerByCode", new object[] {
                    dataBaseName,
                    customerCode}, this.GetCustomerByCodeOperationCompleted, userState);
    }
    
    private void OnGetCustomerByCodeOperationCompleted(object arg) {
        if ((this.GetCustomerByCodeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetCustomerByCodeCompleted(this, new GetCustomerByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetAllItem(string dataBaseName) {
        object[] results = this.Invoke("GetAllItem", new object[] {
                    dataBaseName});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetAllItem(string dataBaseName, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetAllItem", new object[] {
                    dataBaseName}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetAllItem(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetAllItemAsync(string dataBaseName) {
        this.GetAllItemAsync(dataBaseName, null);
    }
    
    /// <remarks/>
    public void GetAllItemAsync(string dataBaseName, object userState) {
        if ((this.GetAllItemOperationCompleted == null)) {
            this.GetAllItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllItemOperationCompleted);
        }
        this.InvokeAsync("GetAllItem", new object[] {
                    dataBaseName}, this.GetAllItemOperationCompleted, userState);
    }
    
    private void OnGetAllItemOperationCompleted(object arg) {
        if ((this.GetAllItemCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetAllItemCompleted(this, new GetAllItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemByCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.Data.DataSet GetItemByCode(string dataBaseName, string itemCode) {
        object[] results = this.Invoke("GetItemByCode", new object[] {
                    dataBaseName,
                    itemCode});
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetItemByCode(string dataBaseName, string itemCode, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetItemByCode", new object[] {
                    dataBaseName,
                    itemCode}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.Data.DataSet EndGetItemByCode(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.Data.DataSet)(results[0]));
    }
    
    /// <remarks/>
    public void GetItemByCodeAsync(string dataBaseName, string itemCode) {
        this.GetItemByCodeAsync(dataBaseName, itemCode, null);
    }
    
    /// <remarks/>
    public void GetItemByCodeAsync(string dataBaseName, string itemCode, object userState) {
        if ((this.GetItemByCodeOperationCompleted == null)) {
            this.GetItemByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemByCodeOperationCompleted);
        }
        this.InvokeAsync("GetItemByCode", new object[] {
                    dataBaseName,
                    itemCode}, this.GetItemByCodeOperationCompleted, userState);
    }
    
    private void OnGetItemByCodeOperationCompleted(object arg) {
        if ((this.GetItemByCodeCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetItemByCodeCompleted(this, new GetItemByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    /// <remarks/>
    public new void CancelAsync(object userState) {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void UpdateJsonCompanyCompletedEventHandler(object sender, UpdateJsonCompanyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateJsonCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateJsonCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void UpdateJsonUserCompletedEventHandler(object sender, UpdateJsonUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateJsonUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateJsonUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void UpdateCompanyCompletedEventHandler(object sender, UpdateCompanyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void UpdateUserCompletedEventHandler(object sender, UpdateUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void UpdateCustomerCompletedEventHandler(object sender, UpdateCustomerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void UpdateItemCompletedEventHandler(object sender, UpdateItemCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class UpdateItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal UpdateItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetAllCompanyCompletedEventHandler(object sender, GetAllCompanyCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetCompanyByCodeCompletedEventHandler(object sender, GetCompanyByCodeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCompanyByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCompanyByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetAllUserCompletedEventHandler(object sender, GetAllUserCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetUserByUserNameCompletedEventHandler(object sender, GetUserByUserNameCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetUserByUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserByUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetAllCustomerCompletedEventHandler(object sender, GetAllCustomerCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetCustomerByCodeCompletedEventHandler(object sender, GetCustomerByCodeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetCustomerByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetCustomerByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetAllItemCompletedEventHandler(object sender, GetAllItemCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetAllItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetAllItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
public delegate void GetItemByCodeCompletedEventHandler(object sender, GetItemByCodeCompletedEventArgs e);

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class GetItemByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetItemByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    /// <remarks/>
    public System.Data.DataSet Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((System.Data.DataSet)(this.results[0]));
        }
    }
}
